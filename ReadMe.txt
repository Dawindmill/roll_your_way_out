

The Developers of 'MazeBall':

Ruijing Zhang(646179)
Bingfeng Liu(639187)
Weiwei Cai(634082)


1. What the application does

This Game is developed for the subject, Graphics and Interaction (COMP30019) in the University of Melbourne. This Game is developed based on the project 2 framework provided from the subject, Graphics and Interaction. The Name of this game is called “MazeBall”. The game is formed by a spherical ball and 3d Maze map. 

2. How to user it

Control the ball by tilting the table/mobile in the direction you want the ball to move to. The movement of the ball follows the natural physics. Tyr to find the exit of the maze and Roll your way out.

On the main page:

Tap/Click the 'start game' button to start playing game. 
Tap/Click the 'about' button to view the authorship statement.
Tap/Click the 'help' button to see how to play the game.
Tap/Click the 'option' button to change the game settings.

For the UI after started the game:

Tap/Click the 'restart' will reset the ball to the initial position.
Tap/Click the 'Path hint' will show the path to the exit from the current position.
Tap/Click the 'seed' can change the seed number and tap/click restart will regenerate a new maze.
Tap/Click the 'exit' will terminate the game.

3. How you modelled objects and entities.
The sphere was made with Blender and imported to the program.
Any other objects were rendered by constructing vertices.
Maze are generated by backwards-Recursive algorithm, which gives user a randomized maze map. 
There is no physics engine between entities and objects, instead of it, we use basic physics knowledge to implement the motion of the Ball and collision detection. 
Since physics engine will requires us to construct maze in a rigid body, which will not be able to fit into randomized maze map in our scope.

4. How you handled graphics and camera motion.
For the shader part of this game, we put majority of effects on the spherical ball, which make it better appearance and more realistic. The shader are basically programmed in the customized fx file - <<modelShader.fx>>. 
The camera is always keep the same distance with the spherical ball, and it always make a fixed angle with the X-Z plane. User will be able to see a reasonable area around the ball, which gives user a better view and help them make better decision. 

5. Credits:

We did not use any other API/code apart from the codes provided from this subject.
